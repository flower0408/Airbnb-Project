version: '3.8'

services:

  notification_service:
    image: notification_service
    container_name: notification_service
    build:
      context: .
      dockerfile: ./notification_service/Dockerfile
    restart: always
    ports:
      - ${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}
    environment:
      NOTIFICATION_DB_HOST: ${NOTIFICATION_DB_HOST}
      NOTIFICATION_DB_PORT: ${NOTIFICATION_DB_PORT}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      SMTP_AUTH_MAIL: ${SMTP_AUTH_MAIL}
      SMTP_AUTH_PASSWORD: ${SMTP_AUTH_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      JAEGER_ADDRESS: ${JAEGER_ADDRESS}
      CERT: /notification_service-cert.pem
      KEY: /notification_service-key.pem
      CA_CERT: /ca-cert.pem
    depends_on:
      - notification_db
      - jaeger
    networks:
      - network
    dns:
      - 8.8.8.8
    volumes:
      - ./notification_service/logs:/app/logs
      - ./api_gateway/cert/notification_service/notification_service-cert.pem:/notification_service-cert.pem
      - ./api_gateway/cert/notification_service/notification_service-key.pem:/notification_service-key.pem
      - ./api_gateway/cert/airbnb_ca/ca-cert.pem:/ca-cert.pem

  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: always
    ports:
      - ${USER_SERVICE_PORT}:${USER_SERVICE_PORT}
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      RESERVATIONS_SERVICE_HOST: ${RESERVATIONS_SERVICE_HOST}
      RESERVATIONS_SERVICE_PORT: ${RESERVATIONS_SERVICE_PORT}
      ACCOMMODATIONS_SERVICE_PORT: ${ACCOMMODATIONS_SERVICE_PORT}
      ACCOMMODATIONS_SERVICE_HOST: ${ACCOMMODATIONS_SERVICE_HOST}
      SECRET_KEY: ${SECRET_KEY}
      JAEGER_ADDRESS: ${JAEGER_ADDRESS}
      CERT: /user_service-cert.pem
      KEY: /user_service-key.pem
      CA_CERT: /ca-cert.pem
    depends_on:
      - user_db
      - jaeger
    networks:
      - network
    volumes:
      - ./user_service/logs:/app/logs
      - ./api_gateway/cert/user_service/user_service-cert.pem:/user_service-cert.pem
      - ./api_gateway/cert/user_service/user_service-key.pem:/user_service-key.pem
      - ./api_gateway/cert/airbnb_ca/ca-cert.pem:/ca-cert.pem


  auth_service:
    image: auth_service
    container_name: auth_service
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    restart: always
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    environment:
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      AUTH_CACHE_HOST: ${AUTH_CACHE_HOST}
      AUTH_CACHE_PORT: ${AUTH_CACHE_PORT}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      SECRET_KEY: ${SECRET_KEY}
      SECRET_CAPTCHA_KEY: ${SECRET_CAPTCHA_KEY}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      RESERVATIONS_SERVICE_PORT: ${RESERVATIONS_SERVICE_PORT}
      RESERVATIONS_SERVICE_HOST: ${RESERVATIONS_SERVICE_HOST}
      ACCOMMODATIONS_SERVICE_PORT: ${ACCOMMODATIONS_SERVICE_PORT}
      ACCOMMODATIONS_SERVICE_HOST: ${ACCOMMODATIONS_SERVICE_HOST}
      SMTP_AUTH_MAIL: ${SMTP_AUTH_MAIL}
      SMTP_AUTH_PASSWORD: ${SMTP_AUTH_PASSWORD}
      JAEGER_ADDRESS: ${JAEGER_ADDRESS}
      CERT: /auth_service-cert.pem
      KEY: /auth_service-key.pem
      CA_CERT: /ca-cert.pem
    depends_on:
      - auth_db
      - auth_cache
      - jaeger
    networks:
      - network
    dns:
      - 8.8.8.8
    volumes:
      - ./auth_service/logs:/app/logs
      - ./api_gateway/cert/auth_service/auth_service-cert.pem:/auth_service-cert.pem
      - ./api_gateway/cert/auth_service/auth_service-key.pem:/auth_service-key.pem
      - ./api_gateway/cert/airbnb_ca/ca-cert.pem:/ca-cert.pem


  accommodations_service:
    image: accommodations_service
    container_name: accommodations_service
    build:
      context: .
      dockerfile: ./accommodations_service/Dockerfile
    restart: always
    ports:
      - ${ACCOMMODATIONS_SERVICE_PORT}:${ACCOMMODATIONS_SERVICE_PORT}
    environment:
      ACCOMMODATIONS_DB_HOST: ${ACCOMMODATIONS_DB_HOST}
      ACCOMMODATIONS_DB_PORT: ${ACCOMMODATIONS_DB_PORT}
      ACCOMMODATIONS_SERVICE_PORT: ${ACCOMMODATIONS_SERVICE_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      RESERVATIONS_SERVICE_PORT: ${RESERVATIONS_SERVICE_PORT}
      RESERVATIONS_SERVICE_HOST: ${RESERVATIONS_SERVICE_HOST}
      NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      SECRET_KEY: ${SECRET_KEY}
      JAEGER_ADDRESS: ${JAEGER_ADDRESS}
      HDFS_URI: namenode:${HDFS_PORT}
      IMAGE_CACHE_HOST: ${IMAGE_CACHE_HOST}
      IMAGE_CACHE_PORT: ${IMAGE_CACHE_PORT}
      CERT: /accommodations_service-cert.pem
      KEY: /accommodations_service-key.pem
      CA_CERT: /ca-cert.pem
    depends_on:
      namenode:
        condition: service_healthy
      datanode1:
        condition: service_healthy
      datanode2:
        condition: service_healthy
      datanode3:
        condition: service_healthy
      jaeger:
        condition: service_started
      accommodations_db:
        condition: service_started
    networks:
      - network
    volumes:
      - ./accommodations_service/logs:/app/logs
      - ./files:/usr/bin/files
      - ./api_gateway/cert/accommodations_service/accommodations_service-cert.pem:/accommodations_service-cert.pem
      - ./api_gateway/cert/accommodations_service/accommodations_service-key.pem:/accommodations_service-key.pem
      - ./api_gateway/cert/airbnb_ca/ca-cert.pem:/ca-cert.pem


  reservations_service:
    image: reservations_service
    container_name: reservations_service
    build:
      context: .
      dockerfile: ./reservations_service/Dockerfile
    restart: always
    ports:
      - ${RESERVATIONS_SERVICE_PORT}:${RESERVATIONS_SERVICE_PORT}
    environment:
      RESERVATIONS_DB_HOST: ${RESERVATIONS_DB_HOST}
      RESERVATIONS_DB_PORT: ${RESERVATIONS_DB_PORT}
      RESERVATIONS_SERVICE_PORT: ${RESERVATIONS_SERVICE_PORT}
      RESERVATIONS_SERVICE_HOST: ${RESERVATIONS_SERVICE_HOST}
      ACCOMMODATIONS_SERVICE_HOST: ${ACCOMMODATIONS_SERVICE_HOST}
      ACCOMMODATIONS_SERVICE_PORT: ${ACCOMMODATIONS_SERVICE_PORT}
      APPOINTMENTS_DB_HOST: ${APPOINTMENTS_DB_HOST}
      APPOINTMENTS_DB_PORT: ${APPOINTMENTS_DB_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      JAEGER_ADDRESS: ${JAEGER_ADDRESS}
      CERT: /reservations_service-cert.pem
      KEY: /reservations_service-key.pem
      CA_CERT: /ca-cert.pem
      # depends_on:
      # - reservations_db
    # Pokretanje reservation servisa tek kada je baza uspesno pokrenuta
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      jaeger:
        condition: service_started
      reservations_db:
        condition: service_healthy

    networks:
      - network
    volumes:
      - ./reservations_service/logs:/app/logs
      - ./api_gateway/cert/reservations_service/reservations_service-cert.pem:/reservations_service-cert.pem
      - ./api_gateway/cert/reservations_service/reservations_service-key.pem:/reservations_service-key.pem
      - ./api_gateway/cert/airbnb_ca/ca-cert.pem:/ca-cert.pem

  recommendation_service:
    image: recommendations_service
    container_name: recommendations_service
    build:
      context: .
      dockerfile: ./recommendations_service/Dockerfile
    restart: always
    ports:
      - ${RECOMMENDATION_SERVICE_PORT}:${RECOMMENDATION_SERVICE_PORT}
    environment:
      RECOMMENDATION_DB_HOST: ${RECOMMENDATION_DB_HOST}
      RECOMMENDATION_DB_PORT: ${RECOMMENDATION_DB_PORT}
      RECOMMENDATION_DB_USER: ${RECOMMENDATION_DB_USER}
      RECOMMENDATION_DB_PASS: ${RECOMMENDATION_DB_PASS}
      RECOMMENDATION_SERVICE_PORT: ${RECOMMENDATION_SERVICE_PORT}
      SECRET_KEY: ${SECRET_KEY}
      CERT: /recommendations_service-cert.pem
      KEY: /recommendations_service-key.pem
      CA_CERT: /ca-cert.pem
    depends_on:
      - recommendation_db
      - jaeger
    networks:
      - network
    volumes:
      - ./api_gateway/cert/recommendations_service/recommendations_service-cert.pem:/recommendations_service-cert.pem
      - ./api_gateway/cert/recommendations_service/recommendations_service-key.pem:/recommendations_service-key.pem
      - ./api_gateway/cert/airbnb_ca/ca-cert.pem:/ca-cert.pem


  api_gateway:
    build:
      context: ./api_gateway/
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    depends_on:
      - reservations_service
      - auth_service
      - user_service
      - notification_service
      - accommodations_service
      - recommendation_service
    networks:
      - network


  notification_db:
    image: mongo
    container_name: notification_db
    restart: on-failure
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  auth_db:
    image: mongo
    container_name: auth_db
    restart: on-failure
    networks:
      - network

  accommodations_db:
    image: mongo
    container_name: accommodations_db
    restart: on-failure
    networks:
      - network


  reservations_db:
    image: cassandra
    container_name: reservations_db
    restart: on-failure
    # Healthcheck za cassandra bazu podataka
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 5s
      retries: 15
    # Preporuka da dodatno podesite healtcheck i za ostale baze
    # (healtcheck provere mozete naci u primerima sa vezbi)
    # Dodatno, bilo bi dobro da konfigurisete volumes za svaku bazu
    # kako biste imali sacuvane podatke i izmedju dva pokretanja
    # recimo:
    volumes:
      - reservations_db_store:/var/lib/cassandra/data
    # I zatim navodite u volumes
    networks:
      - network

  appointments_db:
    image: mongo
    container_name: appointments_db
    restart: on-failure
    networks:
      - network

  auth_cache:
    image: redis
    restart: always
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - ${AUTH_CACHE_PORT}:${AUTH_CACHE_PORT}
    command: redis-server --save 20 1 --loglevel warning
    networks:
      - network
    volumes:
      - auth_cache:/data

  recommendation_db:
    image: neo4j
    restart: always
    ports:
      # bolt
      - "7687:7687"
      # http
      - "7474:7474"
      # https
      - "7473:7473"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://recommendation_db:7687 -u neo4j -p airbnb123 || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_initial_dbms_default__database=recommendation
      - NEO4J_AUTH=neo4j/airbnb123
    networks:
      - network
    volumes:
      - neo4j_data:/data

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - network

  collector:
    image: otel/opentelemetry-collector:0.69.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./api_gateway/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - network

  image_cache:
    image: redis
    restart: always
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
    ports:
      - ${IMAGE_CACHE_INPUT_OUTPUT_PORT}
    command: redis-server --save 20 1 --loglevel warning
    networks:
      - network
    volumes:
      - image_cache:/data

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - 9870:9870
      - ${HDFS_PORT}:${HDFS_PORT}
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hdfs.env
    networks:
      - network

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hdfs.env
    networks:
      - network

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hdfs.env
    networks:
      - network

  datanode3:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode3
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hdfs.env
    networks:
      - network

volumes:
  # Volume na koji se povezuje reservations_db baza podataka
  reservations_db_store:
  neo4j_data:
  auth_cache:
    driver: local
  image_cache:
    driver: local
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:

networks:
  network:
    driver: bridge